---
layout: post
title:  "[자료구조] 스택(stack)"
subtitle:   "자료구조 스택 정리"
categories: dev
tags: algorithm stack
comments: false
---

## 개요
> 자료구조 `스택(stack)`에 대한 정리글입니다.

- 목차
	- [스택(stack)이란?](#스택stack이란) 
  - [Python에서 큐 활용하기](#python에서-큐-활용하기)

## 스택(stack)이란?
---

* __스택(stack)__  
자료구조 중 하나로 가장 나중에 넣은 데이터를 가장 먼저 꺼내는 구조이다. 한쪽 끝에서만 자료를 넣거나 뺄 수 있는 자료구조이다.  
> 필자가 처음으로 스택을 접하고 든 생각은 '이게 쓰이나?'였다. 아르바이트를 하면서 '선입선출'은 쉬도 없이 들어봤는데, 나중에 넣은 것을 가장 먼저 꺼내라니, 생각하기 힘든 구조였다.

스택이 실생활에서 쓰이는 간단한 예를 들어보자면, 패스트푸드점에 놓여있는 쟁반을 생각해보자. 패스트푸드점에서 보통 쟁반을 아래에서 위로 쌓아둔다. 이 때, 새로운 쟁반은 다시 맨 위의 쟁반에 쌓아두게 되는데, 이게 바로 스택이되는 것이다. 가장 나중에 들어온 쟁반을 가장 먼저 손님이 짚어가는 구조이기 때문이다.  
다른 예로 어려운 수학문제를 풀 때를 생각해보자. 내가 A라는 수학 문제를 풀기 위해서 B공식이 필요하며, B공식을 풀기위해서 C연산을 해야한다. 그럼 내 머릿속에서 문제를 푼 순서는 C->B->A 순으로 풀게 된다. 즉, 가장 먼저 본 문제는 A였는데, 이 문제를 풀기 위해서 B를 떠올리고, B를 풀기 위해 가장 나중에 연상이된 C를 풀게된 것이다.  
> 굳이 수학문제를 푸는 과정을 예를 든 이유가 있다. 바로 이 과정이 프로그래밍에서 재귀함수가 동작하는 과정과 유사하기 때문이다. A라는 함수 안에 B라는 함수가 있고, B라는 함수 안에 C라는 함수가 있다고 해보자. 이런 경우에 컴퓨터는 가장 나중에 들어온 C->B->A 순으로 연산을 하게 된다.  

* __스택의 구조__  
스택은 `LIFO(Last In, Fisrt Out)` 또는 `FILO(First In, Last Out)` 데이터 관리 방식을 따른다.
> LIFO: 마지막에 넣은 데이터를 가장 먼저 꺼낸다.  
> FILO: 먼저 넣은 데이터를 가장 마지막에 꺼낸다. 

  - __스택의 주요 기능__  
  push: 데이터를 스택에 넣기  
  pop: 데이터를 스택에서 꺼내기
![이미지1](https://jsim6342.github.io/assets/img/dev/algorithm/2021-04-14-dev-algorithm-stack-picture1.png)


## Python에서 스택 활용하기
---

* __스택을 사용하는 경우__    
가장 나중에 들어온 데이터를 우선적으로 처리하는 상황에서 스택을 사용한다. 솔직히, 큐와 비교했을 때 직감적으로 이해하기 어렵고, 설명하기도 어려운 듯 하다.~~(막상 설명하려니 '이거다'라는 예제가 생각나지 않는다.)~~  
프로그래밍애서 대표적으로 스택 자료구조를 사용하는 경우는 `재귀함수`라고 할 수 있다. 구체적인 설명은 앞선 [스택 설명](#스택stack이란)에서 했으니 넘어가도록 하겠다.  
괄호를 서로 맞출 때도 스택이 활용된다. 알고리즘 문제에서 '('와 ')'가 올바르게 쓰였는지 묻는 문제가 나오곤 한다. 이 때, 스택을 활용해서 가장 나중에 들어온 '('와 ')'를 비교하며 올바르게 괄호가 쓰였는지를 판단해 볼 수도 있다. 
그 외에도 계산기의 내부적인 알고리즘을 구현할 때 스택을 활용한다. 

* __Python 스택 활용 방법__  
스택을 언제 사용해야 하는지 알았다면, 이제 어떻게 스택을 사용하는지 알아야한다.  
Python에서 스택을 구현하는 방법은 그냥 list를 쓰면된다.(아주 간단하다.)  
list가 제공하는 append() 함수는 맨 마지막 index에 원소를 삽입하고, pop() 함수는 맨 마지막 index의 원소를 꺼내고 return한다. 즉, append()로 가장 나중에 들어온 데이터를 pop()으로 가장 먼저 처리할 수 있다.   
```python
stack = list() #스택 자료구조 생성

stack.append(1) #스택에 데이터 삽입
stack.append(2)

stack.pop() #가장 나중에 넣은 데이터를 반환. 여기서는 2 반환.
```


## 참고
</br>
<https://ooeunz.tistory.com/7>